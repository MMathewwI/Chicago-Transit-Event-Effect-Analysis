#%%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from scipy.fft import fft, ifft, fftfreq, rfft, rfftfreq
#import seaborn as sns 
#import datetime
#%%
df = pd.read_csv('Chicago-Transit-Event-Effect-Analysis/Data/Raw_CTA/CTA_Data_File.csv', parse_dates=['date'])
df['rides'] = df['rides'].str.replace(",", "", regex=False).astype(float)
Addison_North_Main = df[df['stationname'] == 'Addison-North Main']
Addison_North_Main = Addison_North_Main[['date', 'rides', 'daytype']].set_index(['date'])
Addison_North_Main = Addison_North_Main[Addison_North_Main.index > '2010-01-01']
Addison_North_Main_Weekend_Holiday = Addison_North_Main[Addison_North_Main['daytype'] == 'U']
#print(Addison_North_Main_Weekend_Holiday)
Addison_North_Main_Weekday = Addison_North_Main[Addison_North_Main['daytype'] == 'W']


#%%
plt.scatter(Addison_North_Main['rolling_avg'], Addison_North_Main['rides'], s= 0.4)

#%%
plt.figure(figsize=(18, 5))
Fit_Model = ExponentialSmoothing(Addison_North_Main['rides'], trend="add", seasonal="add", seasonal_periods=385).fit()
Addison_North_Main['Fit values'] = Fit_Model.fittedvalues
Model_forecast = Fit_Model.forecast(1825)
last_date = Addison_North_Main.index[-1]
Model_forecast.index = pd.date_range(start = last_date, periods = 1825)
plt.scatter(Addison_North_Main.index, Addison_North_Main['rides'], color = 'black', s= 0.4, label = 'Original Data')
plt.plot(Addison_North_Main.index, Addison_North_Main['Fit values'], linestyle="-", label = 'Fitted Line', color = 'red', alpha = 0.3)
plt.plot(Model_forecast.index, Model_forecast, label = '5 Year Forcecast', alpha = 0.5)
plt.xlabel('Date (years)')
plt.ylabel('Rides')
plt.title('Yearly Ridership in Addison-North')
plt.legend()
plt.show()
#%%
print(Model_forecast.index.size)
#%%
plt.figure(figsize=(12,5))
#array = np.asarray(Addison_North_Main['rides'])
array = np.ascontiguousarray(Addison_North_Main['rides'])
yf = rfft(array)
xf = rfftfreq(Addison_North_Main.index.size, 385)
plt.plot(xf, yf)
#%%
#Calc average ridership in time frame to get rolling mean
plt.scatter(Addison_North_Main.index, Addison_North_Main['rides'], s= 0.4)
#plt.scatter(UIC_Halsted['date'], UIC_Halsted['rides'], )
plt.xlabel('Date (years)')
plt.ylabel('Rides')
#plt.show()
plt.title('Yearly Ridership in Addison-North')

